import { ScrollView } from "std-widgets.slint";

import { MovableRectangle } from "./shapes/movable-rectangle.slint";
import { SingleSideWrapArrowEdge } from "./edge/edge.slint";
import { UiNodeData, UiEdgeData, UiDimention } from "./types.slint";

export global AppState {
    in property <length> initial-viewport-width;
    in property <length> initial-viewport-height;

    in-out property <[UiNodeData]> nodes: [];
    in-out property <[UiEdgeData]> edges: [];

    callback update-node(UiNodeData);
    callback save();
}

export component SlintDemoWindow inherits Window {
    min-width: 800px;
    min-height: 600px;

    scroll := Flickable {
        interactive: false;

        for node[i] in AppState.nodes: MovableRectangle {
            x: node.x;
            y: node.y;
            width: node.width;
            height: node.height;
            background: orange;

            Text {
                text: node.label;
                font-size: 20px;
            }

            on-move(dim) => {
                AppState.nodes[i].x = dim.x;
                AppState.nodes[i].y = dim.y;
                if (dim.x + dim.width > scroll.viewport-width) {
                    scroll.viewport-width = dim.x + dim.width;
                }
                if (dim.y + dim.height > scroll.viewport-height) {
                    scroll.viewport-height = dim.y + dim.height;
                } 
            }

            on-move-end(dim) => {
                AppState.save();
            }
        }

        for edge[j] in AppState.edges: SingleSideWrapArrowEdge {
            from: {
                x: AppState.nodes[edge.source-index].x,
                y: AppState.nodes[edge.source-index].y,
                width: AppState.nodes[edge.source-index].width,
                height: AppState.nodes[edge.source-index].height,
            };
            to: {
                x: AppState.nodes[edge.target-index].x,
                y: AppState.nodes[edge.target-index].y,
                width: AppState.nodes[edge.target-index].width,
                height: AppState.nodes[edge.target-index].height,
            };
        }
    }
}
