import { ScrollView } from "std-widgets.slint";

import { UiDimention, UiNode, UiLink, UiSectionItem, UiNodeClass } from "./types.slint";
import { Action, ActionUtils } from "./shapes/action.slint";
import { State, StateUtils } from "./shapes/state.slint";
import { SingleSideWrapArrowEdge } from "./edge/edge.slint";


export global AppState {
    in-out property <length> viewport-width;
    in-out property <length> viewport-height;

    in-out property <[UiNode]> nodes: [];
    in-out property <[int]> action_indexes: [];
    in-out property <[int]> state_indexes: [];
    in-out property <[UiLink]> links: [];

    in-out property <int> selected-index;

    callback save();
}

component App {

    ScrollView {
        viewport-width: AppState.viewport-width + 500px;
        viewport-height: AppState.viewport-height + 500px;

        Rectangle {
            x: 0;
            y: 0;
            width: parent.viewport-width;
            height: parent.viewport-height;
            background: #e9e9e9;
        }

        for idx in AppState.state_indexes: State {
            x: AppState.nodes[idx].x;
            y: AppState.nodes[idx].y;
            selected: AppState.selected-index == idx;

            name: AppState.nodes[idx].id;
            events: AppState.nodes[idx].events;
            states: AppState.nodes[idx].states;

            on-clicked => {
                AppState.selected-index = idx;
            }

            on-move => {
                AppState.nodes[idx].x = self.x;
                AppState.nodes[idx].y = self.y;
            }
        }

        for idx in AppState.action_indexes: Action {
            x: AppState.nodes[idx].x;
            y: AppState.nodes[idx].y;
            selected: AppState.selected-index == idx;

            name: AppState.nodes[idx].id;
            inputs: AppState.nodes[idx].inputs;
            outputs: AppState.nodes[idx].outputs;
            outcomes: AppState.nodes[idx].outcomes;

            on-clicked => {
                AppState.selected-index = idx;
            }

            on-move => {
                AppState.nodes[idx].x = self.x;
                AppState.nodes[idx].y = self.y;
            }
        }

        for link[i] in AppState.links: SingleSideWrapArrowEdge {
            z: 100;
            from-y-offset: ActionUtils.calculate-outcome-y-offset(link.source_outcome_index);
            from: {
                x: AppState.nodes[link.source_index].x,
                y: AppState.nodes[link.source_index].y,
                width: 200px,
                height: ActionUtils.calculate-action-height(
                    AppState.nodes[link.source_index].outcomes.length,
                    AppState.nodes[link.source_index].inputs.length,
                    AppState.nodes[link.source_index].outputs.length),
            };
            to: {
                x: AppState.nodes[link.target_index].x,
                y: AppState.nodes[link.target_index].y,
                width: 200px,
                height: ActionUtils.calculate-action-height(
                    AppState.nodes[link.target_index].outcomes.length,
                    AppState.nodes[link.target_index].inputs.length,
                    AppState.nodes[link.target_index].outputs.length),
            };
        }
    }
}

export component SlintDemoWindow inherits Window {
    min-width: 800px;
    min-height: 600px;

    App {
        width: root.width;
        height: root.height;
    }
}
