import { UiDimention, UiElementItem } from "../types.slint";

export global ActionStyle {
    out property <length> header-height: 20px;
    out property <length> name-height: 20px;
    out property <length> section-separator-height: 20px;
    out property <length> section-header-height: 20px;
    out property <length> item-height: 20px;
    out property <length> bottom-padding: 10px;
    out property <length> border-height: 2px;
    out property <color> border-color: #25d434;
    out property <color> header-background: #25d434;
    out property <color> text-color: #222222;
    out property <color> item-text-color: #7c7c7c;
    out property <length> font-size: 12px;
    out property <int> font-weight: 600;
    out property <length> section-padding: 5px;
}


export global ActionUtils {
    public pure function calculate-action-height(
        outcomes-count: int,
        inputs-count: int,
        outputs-count: int
    ) -> length {
        return ActionStyle.header-height + ActionStyle.name-height +
               (ActionStyle.section-separator-height + ActionStyle.section-header-height + (outcomes-count * ActionStyle.item-height)) +
               (ActionStyle.section-separator-height + ActionStyle.section-header-height + (inputs-count * ActionStyle.item-height)) +
               (ActionStyle.section-separator-height + ActionStyle.section-header-height + (outputs-count * ActionStyle.item-height)) +
               ActionStyle.bottom-padding + ActionStyle.border-height;
    }

    public pure function calculate-outcome-y-offset(outcome-index: int) -> length {
        return ActionStyle.header-height + ActionStyle.name-height +
               ActionStyle.section-separator-height + ActionStyle.section-header-height +
               (outcome-index * ActionStyle.item-height) - ActionStyle.item-height / 2;
    }
}

component ActionSection {
    in property <string> header;
    in property <[UiElementItem]> items;

    VerticalLayout {
        HorizontalLayout {
            padding-left: ActionStyle.section-padding;
            padding-right: ActionStyle.section-padding;
            Path {
                height: ActionStyle.section-separator-height;
                stroke: #c5c5c5;
                stroke-width: 1px;
    
                MoveTo { x: 0; y: 0; }
                LineTo { x: 100; y: 0; }
            }
        }

        Rectangle {
            height: ActionStyle.section-header-height;
            background: #ffffff;            
    
            VerticalLayout {
                padding-left: ActionStyle.section-padding;
                VerticalLayout {
                    height: parent.height;
                    Text {
                        text: root.header;
                        color: ActionStyle.text-color;
                        font-size: ActionStyle.font-size;
                        font-weight: ActionStyle.font-weight;
                        vertical-alignment: top;
                        horizontal-alignment: left;
                    }
                }
            }
        }

        VerticalLayout {
            padding-left: ActionStyle.section-padding;
            for item in root.items: Rectangle {
                height: ActionStyle.item-height;
                background: #ffffff;            
    
                VerticalLayout {
                    height: parent.height;
                    Text {
                        text: item.simple_name;
                        color: ActionStyle.item-text-color;
                        font-size: ActionStyle.font-size;
                        font-weight: ActionStyle.font-weight;
                        vertical-alignment: center;
                        horizontal-alignment: left;
                    }
                }
            }
        }
    }
}

export component Action {
    property <bool> moving;
    property <length> offset-x;
    property <length> offset-y;
    
    callback on-move(UiDimention);
    callback on-move-end(UiDimention);

    in property <string> name;
    in property <[UiElementItem]> outcomes;
    in property <[UiElementItem]> inputs;
    in property <[UiElementItem]> outputs;

    TouchArea {
        width: parent.width;
        height: parent.height;

        pointer-event(event) => {
            if (event.kind == PointerEventKind.down && event.button == PointerEventButton.left) {
                root.offset-x = self.mouse-x;
                root.offset-y = self.mouse-y;
                root.moving = true;
            } else if (event.kind == PointerEventKind.up) {
                root.moving = false;
                on-move-end({
                    x: root.x,
                    y: root.y,
                    width: root.width,
                    height: root.height,
                });
            }
        }

        moved => {
            if (root.moving) {
                root.x = root.x + self.mouse-x - root.offset-x;
                root.y = root.y + self.mouse-y - root.offset-y;
                on-move({
                    x: root.x,
                    y: root.y,
                    width: root.width,
                    height: root.height,
                });
            }
        }
    }

    // border
    Rectangle {
        background: white;
        border-color: ActionStyle.border-color;
        border-width: ActionStyle.border-height / 2;
        width: child.width + ActionStyle.border-height;
        height: child.height + ActionStyle.border-height;
    }

    child := VerticalLayout {
        padding-bottom: ActionStyle.bottom-padding;

        Rectangle {
            height: ActionStyle.header-height;
            min-width: 200px;
            background: ActionStyle.header-background;
            border-radius: 2px;

            Text {
                text: "Action";
                color: white;
                font-size: ActionStyle.font-size;
                font-weight: ActionStyle.font-weight;
                vertical-alignment: center;
                horizontal-alignment: center;
            }
        }

        Rectangle {
            height: ActionStyle.name-height;

            Text {
                text: root.name;
                color: ActionStyle.text-color;
                font-size: ActionStyle.font-size;
                font-weight: ActionStyle.font-weight;
                vertical-alignment: center;
                horizontal-alignment: center;
            }
        }

        ActionSection {
            header: "Outcomes";
            items: root.outcomes;
        }

        ActionSection {
            header: "Inputs";
            items: root.inputs;
        }

        ActionSection {
            header: "Outputs";
            items: root.outputs;
        }
    }
}